akka {

  loglevel = "DEBUG"

  actor {

    # Dead letter messages
    log-dead-letters = 10
    log-dead-letters-during-shutdown = on

    # Log the complete configuration at INFO level when the actor system is started.
    # This is useful when you are uncertain of what configuration is used.
    log-config-on-start = on


    debug {
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = off
      lifecycle = off
      # enable DEBUG logging of unhandled messages
      unhandled = on
      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off
      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = off

    }

    #remote {
      # If this is "on", Akka will log all outbound messages at DEBUG level,
      # if off then they are not logged
     # log-sent-messages = on
      # If this is "on", Akka will log all inbound messages at DEBUG level,
      # if off then they are not logged
      #log-received-messages = on
      # Logging of message types with payload size in bytes larger than
      # this value. Maximum detected size per message type is logged once,
      # with an increase threshold of 10%.
      # By default this feature is turned off. Activate it by setting the property to
      # a value in bytes, such as 1000b. Note that for all messages larger than this
      # limit there will be extra performance and scalability cost.
      #log-frame-size-exceeding = 1000b
    #}

  }

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  #loggers = ["akka.event.Logging$DefaultLogger"]

  #event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  #loggers = ["akka.event.slf4j.Slf4jLogger"]
  #logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

}